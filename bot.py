import telebot
from telebot import types
import requests
from PIL import Image, ImageFilter
import io

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
API_TOKEN = '8484634753:AAGA0MavOB7hzCZAUW2WCtBHao0yd7rXWqI'

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_choices = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CipherBot!

–Ø —É–º–µ—é:
‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —à–∏—Ñ—Ä–æ–º –¶–µ–∑–∞—Ä—è
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–º–æ—â—å
/cipher - –º–µ–Ω—é —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!
    """
    bot.reply_to(message, welcome_text)

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cipher —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞

üî¢ –î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥:
–í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é "–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç

üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –ø—Ä–∏–º–µ–Ω—é –∫ –Ω–µ–º—É —Ñ–∏–ª—å—Ç—Ä –∏ –≤–µ—Ä–Ω—É –æ–±—Ä–∞—Ç–Ω–æ.

üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ /cipher
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
    """
    bot.reply_to(message, help_text)

# –ö–æ–º–∞–Ω–¥–∞ /cipher
@bot.message_handler(commands=['cipher'])
def cipher_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üîê –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è')
    btn2 = types.KeyboardButton('üî¢ –î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥')
    btn3 = types.KeyboardButton('üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç')
    btn4 = types.KeyboardButton('‚ùå –°–∫—Ä—ã—Ç—å –º–µ–Ω—é')
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(message.chat.id, 
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:\n\n"
                    "üîê –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è - –∑–∞—à–∏—Ñ—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç\n"
                    "üî¢ –î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥ - –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –≤ –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É\n"
                    "üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç\n"
                    "‚ùå –°–∫—Ä—ã—Ç—å –º–µ–Ω—é - —É–±–µ—Ä–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", 
                    reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è
def caesar_cipher(text, shift=3):
    result = ""
    for char in text:
        if char.isalpha():
            if char.isupper():
                # –î–ª—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
                if '–ê' <= char <= '–Ø':
                    result += chr((ord(char) + shift - 1040) % 32 + 1040)
                # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤
                elif 'A' <= char <= 'Z':
                    result += chr((ord(char) + shift - 65) % 26 + 65)
                else:
                    result += char
            else:
                # –î–ª—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
                if '–∞' <= char <= '—è':
                    result += chr((ord(char) + shift - 1072) % 32 + 1072)
                # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤
                elif 'a' <= char <= 'z':
                    result += chr((ord(char) + shift - 97) % 26 + 97)
                else:
                    result += char
        else:
            result += char
    return result

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥
def text_to_binary(text):
    binary_result = []
    for char in text:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª –≤ –µ–≥–æ —á–∏—Å–ª–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥
        binary_char = format(ord(char), '08b')
        binary_result.append(binary_char)
    return ' '.join(binary_result)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text in ['üîê –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è', 'üî¢ –î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥', 'üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç', '‚ùå –°–∫—Ä—ã—Ç—å –º–µ–Ω—é'])
def handle_menu_choice(message):
    user_id = message.chat.id
    
    if message.text == 'üîê –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è':
        user_choices[user_id] = 'caesar'
        bot.send_message(message.chat.id, "‚úÖ –í—ã–±—Ä–∞–Ω –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!")
        
    elif message.text == 'üî¢ –î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥':
        user_choices[user_id] = 'binary'
        bot.send_message(message.chat.id, "‚úÖ –í—ã–±—Ä–∞–Ω –î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è!")
        
    elif message.text == 'üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç':
        user_choices[user_id] = 'normal'
        bot.send_message(message.chat.id, "‚úÖ –í—ã–±—Ä–∞–Ω –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç!")
        
    elif message.text == '‚ùå –°–∫—Ä—ã—Ç—å –º–µ–Ω—é':
        markup = types.ReplyKeyboardRemove()
        user_choices[user_id] = None
        bot.send_message(message.chat.id, 
                        "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cipher —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é.\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç - –±–æ—Ç –±—É–¥–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –º–µ—Ç–æ–¥ —Å–ª—É—á–∞–π–Ω–æ.",
                        reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.chat.id
    user_text = message.text
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    if user_text in ['üîê –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è', 'üî¢ –î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥', 'üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç', '‚ùå –°–∫—Ä—ã—Ç—å –º–µ–Ω—é']:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_choices and user_choices[user_id]:
        choice = user_choices[user_id]
    else:
        # –ï—Å–ª–∏ –≤—ã–±–æ—Ä–∞ –Ω–µ—Ç - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
        import random
        choice = random.choice(['caesar', 'binary', 'normal'])
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
    if choice == 'caesar':
        encrypted = caesar_cipher(user_text)
        response = f"üîê **–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è (—Å–¥–≤–∏–≥ 3):**\n`{encrypted}`"
        
    elif choice == 'binary':
        try:
            binary = text_to_binary(user_text)
            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(binary) > 4000:
                binary = binary[:4000] + "...\n‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤"
            response = f"üî¢ **–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥:**\n`{binary}`"
        except Exception as e:
            response = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥: {str(e)}"
            
    elif choice == 'normal':
        response = f"üìù **–í–∞—à —Ç–µ–∫—Å—Ç:**\n{user_text}"
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_info = bot.get_file(message.photo[-1].file_id)
        file = requests.get(f'https://api.telegram.org/file/bot{API_TOKEN}/{file_info.file_path}')
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(file.content))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä (—Ä–∞–∑–º—ã—Ç–∏–µ)
        processed_image = image.filter(ImageFilter.GaussianBlur(2))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        bio = io.BytesIO()
        processed_image.save(bio, 'JPEG')
        bio.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        bot.send_photo(message.chat.id, photo=bio, caption="üñºÔ∏è –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º —Ä–∞–∑–º—ã—Ç–∏—è!")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@bot.message_handler(content_types=['document', 'audio', 'video', 'sticker'])
def handle_other(message):
    bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)